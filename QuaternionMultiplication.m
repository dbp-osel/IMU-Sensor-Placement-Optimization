function [Resultant_Quaternion] = QuaternionMultiplication(a,b)
% This function multiplies quaternion a into quaternion b 
% (quata*quatb = Resultant_Quaternion). The inputs should be given as
% vectors with four elements with elements 1 through 4 corresponding to the
% scaler, i, j , and k values respectively. The output is a 1x4 vector with
% elements corresponding to scaler, i, j , and k

Resultant_Quaternion = ...
    [a(:,1).*b(:,1)+ -1*a(:,2).*b(:,2)+ -1*a(:,3).*b(:,3)+ -1*a(:,4).*b(:,4), ...    %scaler
     a(:,1).*b(:,2)+    a(:,2).*b(:,1)+    a(:,3).*b(:,4)+ -1*a(:,4).*b(:,3), ...   %i values
     a(:,1).*b(:,3)+ -1*a(:,2).*b(:,4)+    a(:,3).*b(:,1)+    a(:,4).*b(:,2), ...    %j values
     a(:,1).*b(:,4)+    a(:,2).*b(:,3)+ -1*a(:,3).*b(:,2)+    a(:,4).*b(:,1)];        %k values

% The resultant quaternion is calculated by summing the scaler, i, j, and k
% values generated by multiplying out all of the components of the two
% input quaternions based on the multiplication table given below. The
% Resultant_Quaternion output is obtained simply by rearranging the table
% below, and summing the different components.

% Quaternion Multiplication Table 
%           qb1 qb2 qb3 qb4
%      qa1   1   i   j   k
%      qa2   i  -1   k  -j
%      qa3   j  -k  -1   i
%      qa4   k   j  -i  -1
end